<?php

/**
 * @file
 * Overwrite some features on easySuite.
 */

include_once 'gronbib_frontend.features.inc';

/**
 * Implements hook_module_implements_alter().
 */
function gronbib_frontend_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['gronbib_frontend'])) {
    $group = $implementations['gronbib_frontend'];
    unset($implementations['gronbib_frontend']);
    $implementations['gronbib_frontend'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gronbib_frontend_form_search_block_form_alter(&$form, &$form_state) {
  $page_args = arg();
  if (!empty($page_args[1]) && is_numeric($page_args[1])) {
    $node = node_load($page_args[1]);
    if ($node->type == 'ding_library') {
      // Getting info about current node translations.
      $node_translations = translation_node_get_translations($node->tnid);

      // Collecting translations titles.
      $titles = [];
      foreach ($node_translations as $node_translation) {
        $titles[] = $node_translation->title;
      }

      // Hardcoding relations of library title (in english) with option from
      // ting_search_field search form fieldset.
      if (in_array('Central Library of Greenland', $titles)) {
        $form['ting_field_search']['#default_value'] = 'nunatta_atuagaateqarfia';
      }

      if (in_array('National Library of Greenland', $titles)) {
        $form['ting_field_search']['#default_value'] = 'groenlandica';
      }
    }
  }
}

/**
 * Implements hook_post_features_revert().
 */
function gronbib_frontend_post_features_revert($component) {
  // Enable detection of language from URL.
  $negotiation = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  variable_del('language_negotiation_language');
  variable_set('language_negotiation_language', $negotiation);

  // Set custom path to language icons.
  variable_set('languageicons_path', 'https://storage.easyting.dk/icons/*.png');

  // Enable multilanguage support for content types.
  $content_types = node_type_get_types();
  foreach ($content_types as $content_type) {
    variable_set('language_content_type_' . $content_type->type, 2);
  }

  variable_set('gronbib_frontend_random', rand());
}

/**
 * Implements hook_views_query_alter().
 */
function gronbib_frontend_views_query_alter(&$view, &$query) {
  switch ($view->name) {
    case 'ding_library':
    case 'ding_news':
    case 'ding_event':
    case 'ding_groups':
      $query->where[1]['conditions'][] = array(
        'field' => 'language',
        'value' => array(
          '***CURRENT_LANGUAGE***' => '***CURRENT_LANGUAGE***',
        ),
      );
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gronbib_frontend_preprocess_views_view(&$variables) {
  if ($variables['name'] == 'gronbib_libraries_views' && $variables['display_id'] == 'ding_library_frontpage_list') {
    $variables['classes_array'][] = 'slide-on-mobile';
  }
}
